print(finalg)
#stt grade calc
mid = 74
proj = c((14/15)*100, 100,100,100,100)
final = 80
pres = (14/15)*100
paper = (14/15)*100
finalg = sum(mid*0.15, mean(proj)*.45, final*.2, pres*.1, paper*.1)
print(finalg)
?matrix(
)
m = matrix(c(1,2,3,4,5,6,7,8,9), nrow =3 )
m\
m
flatten(m, across = "rows")
new = as.vector(m)
new
new = as.vector(as.data.frame(m)
)
new
newvector = as.vector(m)
new = as.vector(as.matrix.data.frame(m))
m = matrix(c(1,2,3,4,5,6,7,8,9), nrow =3 )
newvector = as.vector(m)
new = as.vector(as.matrix.data.frame(m))
new
?rep()
?sort()
grades
numLlvs <- 4
confusionMatrix(
factor(sample(rep(letters[1:numLlvs], 200), 50)),
factor(sample(rep(letters[1:numLlvs], 200), 50)))
install.packages("confusionMatrix")
library('caret')
numLlvs <- 4
confusionMatrix(
factor(sample(rep(letters[1:numLlvs], 200), 50)),
factor(sample(rep(letters[1:numLlvs], 200), 50)))
sample(rep(letters[1:numLlvs], 200), 50)
sample(rep(letters[1:numLlvs], 200), 50)
confusionMatrix(
factor(sample(rep(letters[1:numLlvs], 200), 50)),
factor(sample(rep(letters[1:numLlvs], 200), 50)))
library('dplyr')
library('ordinalNet')
### simulation n = 21 ###
#create the dataset with starting quantites, all products and test 1 cp values
sd.val = 0.2
sd.val.test = 0.1
set.seed(1234)
eps = rnorm(21, 0, sd.val)
set.seed(12345)
eps.test= rnorm(21, 0, sd.val.test)
stq =sort(rep(c(0.010, 0.050, 0.100, 0.500, 1.000, 0.005, 5.000), 3))
allp = (-2.5)*log(stq)+25+eps
test1 = -2.7*log(stq)+23+eps.test
#plot the two cp types against log starting quantity
plot( allp,log(stq), col = 'red', main = "Log Starting Quanitty vs. Cp Values",
ylab = "log(Starting Quantity)", xlab = "Cp Values" , xlim = c(15, 45), ylim = c(-6, 2))
points(test1,log(stq), col = 'blue')
abline(lm(log(stq)~allp), col = 'red')
abline(lm(log(stq)~test1), col = 'blue')
legend('topright', legend=c("Test 1", "All Products"),
col=c("blue", "red"), lty = 1, cex=0.8)
# create the data frame and include the z scores of test 1 and all p
# create the data frame and include the z scores of test 1 and all p
data = as.data.frame(cbind(stq, allp, test1))
data$ztest1 = (data$test1 - mean(data$test1))/sd(data$test1)
data$zallP = (data$allp - mean(data$allp))/sd(data$allp)
#define ordinal model starq~zallP+ztest1
covmat = as.matrix(data[, c(4,5)])
ordmod = ordinalNet(covmat, as.factor(data$stq))
summary(ordmod)
coef(ordmod, matrix=TRUE)
#kfold cv
set.seed(123)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit$loglik))
head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
#kfold cv
set.seed(123)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
l products and test 1 cp values
sd.val = 0.2
sd.val.test = 0.1
set.seed(1234)
eps = rnorm(21, 0, sd.val)
set.seed(12345)
eps.test= rnorm(21, 0, sd.val.test)
stq =sort(rep(c(0.010, 0.050, 0.100, 0.500, 1.000, 0.005, 5.000), 3))
allp = (-2.5)*log(stq)+25+eps
test1 = -2.7*log(stq)+23+eps.test
#plot the two cp types against log starting quantity
plot( allp,log(stq), col = 'red', main = "Log Starting Quanitty vs. Cp Values",
ylab = "log(Starting Quantity)", xlab = "Cp Values" , xlim = c(15, 45), ylim = c(-6, 2))
points(test1,log(stq), col = 'blue')
abline(lm(log(stq)~allp), col = 'red')
abline(lm(log(stq)~test1), col = 'blue')
legend('topright', legend=c("Test 1", "All Products"),
col=c("blue", "red"), lty = 1, cex=0.8)
# create the data frame and include the z scores of test 1 and all p
data = as.data.frame(cbind(stq, allp, test1))
data$ztest1 = (data$test1 - mean(data$test1))/sd(data$test1)
data$zallP = (data$allp - mean(data$allp))/sd(data$allp)
#### Ordinal Net Models ####
## Model 1 ##
#define ordinal model starq~zallP+ztest1
covmat = as.matrix(data[, c(4,5)])
ordmod = ordinalNet(covmat, as.factor(data$stq))
summary(ordmod)
coef(ordmod, matrix=TRUE)
#kfold cv
set.seed(123)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit$loglik))
head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
#kfold cv
set.seed(12)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
#kfold cv
set.seed(123)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
#kfold cv
set.seed(12)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit$loglik))
head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
##finding ajustment value##
group = split.data.frame(data, data$stq)
adj <- function(AllP, Test1){
adjust = ave(AllP)-ave(Test1)
return(adjust)
}
adjval = NULL
for (k in group){
adjval = c(adjval,adj(k$allp, k$test1))
}
data$adjval = adjval
data$adjusted_test1 = data$test1 + adjval
#### Simulate the experimental data ####
set.seed = (2)
expAllp.sim = rnorm(200, mean = 24.55, sd = 4.735)
set.seed = (3)
expTest1.sim = rnorm(200, mean = 18.01, sd = 2.77)
expsim = as.data.frame(cbind(expAllp.sim, expTest1.sim))
expsim$ztest1 = (expsim$expTest1.sim - mean(expsim$expTest1.sim))/sd(expsim$expTest1.sim)
expsim$zallP = (expsim$expAllp.sim - mean(expsim$expAllp.sim))/sd(expsim$expAllp.sim)
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]),options(scipen=999))
#### calculating experimental starting quantity ####
probmat = format(predict(ordfit$fit, as.matrix(expsim[,3:4])), scientific = FALSE)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = format(predict(ordfit$fit, as.matrix(expsim[,3:4])), options(scipen=999))
#### calculating experimental starting quantity ####
probmat = format(predict(ordfit$fit, as.matrix(expsim[,3:4])), scientific = FALSE)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
options(scipen=999, digits = 4)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
options(scipen=100, digits = 4)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
options(scipen=999)
probmat[1:10,]
install.packages(precrec)
install.packages("precrec")
library('precrec')
math = c(64,50,85,34,56,24,72,63,42,93)
sci = c(68,70,83,33,60,27,74,63,40,96)
plot(math, sci)
abline(lm(sci~math))
plot(math, sci, main = "Association between Math and Science Test Scores")
abline(lm(sci~math))
abs = c(3,5,1,1,3,6,5,3,0,7,8,2,9,0,6,6,2,0,5,7,9,1)
scores = c(65,50,95,85,50,34,70,56,100,24,45,71,30,95,55,42,90,92,60,50,10,80)
plot(abs, math, main = "Plot of number of Absences vs. Math Scores")
abline(lm(scores~abs))
length(abs)
length(scores)
abs = c(3,5,1,1,3,6,5,3,0,7,8,2,9,0,6,6,2,0,5,7,9,1)
scores = c(65,50,95,85,50,34,70,56,100,24,45,71,30,95,55,42,90,92,60,50,10,80)
plot(abs, math, main = "Plot of number of Absences vs. Math Scores")
plot(abs, scores, main = "Plot of number of Absences vs. Math Scores")
abline(lm(scores~abs))
summary(lm(scores~abs))
predict(lm(scores~abs), 3)
model = lm(scores~abs)
abline(model)
summary(model)
predict(model, 3)
predict(3, model)
predict(model, 3)
predict(model, as.matrix(3)
)
predict(model, c(2,3))
dat = cbind(abs, scores)
model = lm(scores~abs, data = dat)
dat = as.matrix(cbind(abs, scores))
model = lm(scores~abs, data = dat)
dat = as.data.frame(cbind(abs, scores))
plot(abs, scores, main = "Plot of number of Absences vs. Math Scores")
model = lm(scores~abs, data = dat)
abline(model)
summary(model)
predict(model, 3)
predict(model, c(2,3))
math = c(64,50,85,34,56,24,72,63,42,93)
sci = c(68,70,83,33,60,27,74,63,40,96)
plot(math, sci, main = "Association between Math and Science Test Scores")
abline(lm(sci~math))
abs = c(3,5,1,1,3,6,5,3,0,7,8,2,9,0,6,6,2,0,5,7,9,1)
scores = c(65,50,95,85,50,34,70,56,100,24,45,71,30,95,55,42,90,92,60,50,10,80)
dat = as.data.frame(cbind(abs, scores))
plot(abs, scores, main = "Plot of number of Absences vs. Math Scores")
model = lm(scores~abs, data = dat)
abline(model)
summary(model)
library('dplyr')
library('ordinalNet')
library('precrec')
data(P10N10)
View(P10N10)
head(P10N10)
sscurves <- evalmod(scores = P10N10$scores, labels = P10N10$labels)
plot(sscurves)
plot(sscurves, "PRC")
samp1 <- create_sim_samples(5, 50000, 50000)
View(samp1)
eval1 <- evalmod(scores = samp1$scores, labels = samp1$labels)
View(eval1)
eval1
67*17.5
36*15
36*15+1172.5
1712.5*.75
(67+16)*17.5
((67+16)*17.5+540)*.75
#create the dataset with starting quantites, all products and test 1 cp values
sd.val = 0.2
sd.val.test = 0.1
set.seed(1234)
eps = rnorm(21, 0, sd.val)
set.seed(12345)
eps.test= rnorm(21, 0, sd.val.test)
stq =sort(rep(c(0.010, 0.050, 0.100, 0.500, 1.000, 0.005, 5.000), 3))
allp = (-2.5)*log(stq)+25+eps
test1 = -2.7*log(stq)+23+eps.test
data = as.data.frame(cbind(stq, allp, test1))
data$ztest1 = (data$test1 - mean(data$test1))/sd(data$test1)
data$zallP = (data$allp - mean(data$allp))/sd(data$allp)
View(data)
covmat = as.matrix(data[, c(4,5)])
ordmod = ordinalNet(covmat, as.factor(data$stq))
summary(ordmod)
coef(ordmod, matrix=TRUE)
#kfold cv
set.seed(12)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit$loglik))
head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
#######################################
####### k-Fold Cross Validation ####### ordinalNet model
#######################################
library(caret)
n = length(calib_subset[,1])
set.seed(1)
f <- 7
folds <- rep_len(1:f, length.out = dim(calib_subset)[1])
folds <- sample(folds, size = dim(calib_subset)[1], replace = F)
table(folds)
n = length(data[,1])
set.seed(1)
f <- 7
folds <- rep_len(1:f, length.out = dim(data)[1])
folds <- sample(folds, size = dim(data)[1], replace = F)
table(folds)
preds = NULL
truth = NULL
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "startq"]
train_x = data[-test.ID, 2:5]
test_y = data[test.ID, "startq"]
test_x = data[test.ID, 2:5]
truth = c(truth, test_y)
model.fit = ordinalNet(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "startq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "startq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordinalNet(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
preds = NULL
truth = NULL
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "stq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "stq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordfit$fit(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
set.seed = (2)
expAllp.sim = rnorm(200, mean = 24.55, sd = 4.735)
set.seed = (3)
expTest1.sim = rnorm(200, mean = 18.01, sd = 2.77)
expsim = as.data.frame(cbind(expAllp.sim, expTest1.sim))
expsim$ztest1 = (expsim$expTest1.sim - mean(expsim$expTest1.sim))/sd(expsim$expTest1.sim)
expsim$zallP = (expsim$expAllp.sim - mean(expsim$expAllp.sim))/sd(expsim$expAllp.sim)
#####
#### calculating experimental starting quantity ####
k = 1
test.ID = which(folds == k)
train_y = data[-test.ID, "stq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "stq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordfit$fit(as.matrix(train_x), as.factor(train_y))
model.fit = ordfit$fit(train_x, train_y)
train_x
train_y
model.fit = ordinalNetTune(train_x, train_y)
model.fit = ordinalNetTune(train_x, as.factor(train_y), family = 'cumulative', link = 'logit',
parallelTerms = TRUE, nonparallelTerms = TRUE, want = FALSE,
printProgress = FALSE)
100/9
library('dplyr')
library('ordinalNet')
library('precrec')
-16.05*1000
5*.2
5*.2-10*.2
0.00533/34.34
fg =c(0.00533, 0.00208, 0.00317, 0.00597, 0.00967, 0.00766)
pg = c(34.34, 35.59, 35.03, 37.25, 33.55, 33.86)
pg/fg
fg/pg
options(scipen=999)
fg/pg
x =c(10,8,13,9,11,14,6,4,12,7,5)
y =c(9.14,8.14,8.75,8.77,9.25,8.09,6.13,3.09,9.13,7.26,4.74)
Sx =sum(x)
Sy = sum(y)
Sxy = sum(x*y)
Sx2 = sum(x^2)
Sy2 = sum(y^2)
n = length(x)
numer = n*Sxy-Sx*Sy
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sx2-Sx^2)
numer/denom
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
numer/denom
sqrt(n*Sx2-Sx^2)
denom = sqrt(n*(Sx2-Sx^2))-sqrt(n*(Sy2-Sy^2)
)
denom = sqrt(n*(Sx2-Sx^2))-sqrt(n*(Sy2-Sy^2))
sqrt(n*(Sx2-Sx^2))
sqrt(11*1001-9801)
Sx^2
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
n*Sxy
Sx*Sy
11*1001-9801
numer = n*Sxy-Sx*Sy
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
numer/denom
denom = sqrt(n*Sx2-Sx^2)*sqrt(n*Sy2-Sy^2)
numer/denom
quiz = c(100, 90.63, 84.38, 56.25, 95, 95, 81.67, 58.33, 34.17, 100, 80.61, 92.86, 81.63, 100, 73.33,
96.3, 90.74, 57.96, 100, 89.09, 72.73, 93.33, 95.83, 79.17, 62.5, 65.28, 48.61)
exams = c(75.12, 100, 100)
final = 100
grade = mean(quiz)*.21+mean(exams)*.54+final*.25
grade
# grade calculation
quiz = c(100, 90.63, 84.38, 56.25, 95, 95, 81.67, 58.33, 34.17, 100, 80.61, 92.86, 81.63, 100, 73.33,
96.3, 90.74, 57.96, 100, 89.09, 72.73, 93.33, 95.83, 79.17, 62.5, 65.28, 48.61)
exams = c(75.12)
final = 100
grade = mean(quiz)*.21+mean(exams)*.54+final*.25
grade
.21+.18+.18+.18+.25
quiz = c(68.75, 69.7, 77.78,97.44, 87.5, 87.5, 64.37,
100, 85, 78.57,100, 86.3, 100, 83.33)
tests = c(100,57.41,  78.39)
final = 100
grade= mean(quiz)*.21+sum(.18*test)+final*.25
grade= mean(quiz)*.21+sum(.18*tests)+final*.25
grade
mean(quiz)
tests = c(90,57.41,  78.39)
final = 90
grade= mean(quiz)*.21+sum(.18*tests)+final*.25
grade
tests = c(80,57.41,  78.39)
final = 80
grade= mean(quiz)*.21+sum(.18*tests)+final*.25
grade
mean(quiz)
(57.41+87.39)/2
tests = c(100,57.41,  78.39)
final = 100
grade= mean(quiz)*.21+sum(.18*tests)+final*.25
grade
quiz = c(80.3, 87.5, 94.44, 100, 100, 97.5, 96.55, 100, 100, 100, 100, 100, 91.67, 0, 0)
tests = c(100,57.14,  92.5)
final = 100
grade= mean(quiz)*.21+sum(.18*tests)+final*.25
grade
mean(quiz)
18*3
Nv = 292
Nl = 292
Nt = Nv+Nl
Pv = 0.61
Pl = 0.08
Pt = ((Pv*Nv)+(Pl*Nl))/Nt
Z = (Pv-Pl)/sqrt(Pt*(1-Pt)*(2/Nv))
Z
(0.61-0.08)/sqrt((0.35*(1-0.35)*(2/292))
)
x<-(rnorm(900), rnorm(100, mean = 3))
x<-c(rnorm(900), rnorm(100, mean = 3))
p = pnorm(x, lower.tail = F)
p
?pnorm()
x<-c(rnorm(900), rnorm(100, mean = 3))
p = pnorm(x, lower.tail = F)
test = p>0.5
summary(test[1:900])
summary(test[901:1000])
test = p>0.05
summary(test[1:900])
summary(test[901:1000])
set.seed(123)
x<-c(rnorm(900), rnorm(100, mean = 3))
p = pnorm(x, lower.tail = F)
test = p>0.05
summary(test[1:900])
summary(test[901:1000])
set.seed(123)
x<-c(rnorm(900), rnorm(100, mean = 3))
p = pnorm(x, lower.tail = F)
test = p>0.05
summary(test[1:900])
summary(test[901:1000])
50/850
50/900
a = 0.05
n = 1000
ab = a/n
ab
test = p>ab
summary(test[1:900])
summary(test[901,1000])
summary(test[901:1000])
library("qtl")
library("vqtl")
library("dplyr")
library("tidyverse")
library("ggplot2")
#library(beepr)
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/vqtl/StressVQTL")
### Inbred Plot Work ###
stressprodInbred = readRDS(file = "data/inbredplotprep.RDS")
plot(stressprodInbred, main = "Inbred vQTL Plots")
so_p1 <- scanone(cross = stressprodInbred,
pheno.col = 'stress')
sov_p1 <- scanonevar(cross = stressprodInbred,
mean.formula = stress ~ mean.QTL.add + mean.QTL.dom,
var.formula = ~ var.QTL.add + var.QTL.dom)
ymax <- 6
plot(p1_LOD_scan <- plot(x = sov_p1, y = so_p1, ymax = ymax))
