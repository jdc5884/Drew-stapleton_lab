head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
#######################################
####### k-Fold Cross Validation ####### ordinalNet model
#######################################
library(caret)
n = length(calib_subset[,1])
set.seed(1)
f <- 7
folds <- rep_len(1:f, length.out = dim(calib_subset)[1])
folds <- sample(folds, size = dim(calib_subset)[1], replace = F)
table(folds)
n = length(data[,1])
set.seed(1)
f <- 7
folds <- rep_len(1:f, length.out = dim(data)[1])
folds <- sample(folds, size = dim(data)[1], replace = F)
table(folds)
preds = NULL
truth = NULL
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "startq"]
train_x = data[-test.ID, 2:5]
test_y = data[test.ID, "startq"]
test_x = data[test.ID, 2:5]
truth = c(truth, test_y)
model.fit = ordinalNet(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "startq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "startq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordinalNet(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
preds = NULL
truth = NULL
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "stq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "stq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordfit$fit(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
set.seed = (2)
expAllp.sim = rnorm(200, mean = 24.55, sd = 4.735)
set.seed = (3)
expTest1.sim = rnorm(200, mean = 18.01, sd = 2.77)
expsim = as.data.frame(cbind(expAllp.sim, expTest1.sim))
expsim$ztest1 = (expsim$expTest1.sim - mean(expsim$expTest1.sim))/sd(expsim$expTest1.sim)
expsim$zallP = (expsim$expAllp.sim - mean(expsim$expAllp.sim))/sd(expsim$expAllp.sim)
#####
#### calculating experimental starting quantity ####
k = 1
test.ID = which(folds == k)
train_y = data[-test.ID, "stq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "stq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordfit$fit(as.matrix(train_x), as.factor(train_y))
model.fit = ordfit$fit(train_x, train_y)
train_x
train_y
model.fit = ordinalNetTune(train_x, train_y)
model.fit = ordinalNetTune(train_x, as.factor(train_y), family = 'cumulative', link = 'logit',
parallelTerms = TRUE, nonparallelTerms = TRUE, want = FALSE,
printProgress = FALSE)
100/9
library('dplyr')
library('ordinalNet')
library('precrec')
-16.05*1000
5*.2
5*.2-10*.2
0.00533/34.34
fg =c(0.00533, 0.00208, 0.00317, 0.00597, 0.00967, 0.00766)
pg = c(34.34, 35.59, 35.03, 37.25, 33.55, 33.86)
pg/fg
fg/pg
options(scipen=999)
fg/pg
x =c(10,8,13,9,11,14,6,4,12,7,5)
y =c(9.14,8.14,8.75,8.77,9.25,8.09,6.13,3.09,9.13,7.26,4.74)
Sx =sum(x)
Sy = sum(y)
Sxy = sum(x*y)
Sx2 = sum(x^2)
Sy2 = sum(y^2)
n = length(x)
numer = n*Sxy-Sx*Sy
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sx2-Sx^2)
numer/denom
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
numer/denom
sqrt(n*Sx2-Sx^2)
denom = sqrt(n*(Sx2-Sx^2))-sqrt(n*(Sy2-Sy^2)
)
denom = sqrt(n*(Sx2-Sx^2))-sqrt(n*(Sy2-Sy^2))
sqrt(n*(Sx2-Sx^2))
sqrt(11*1001-9801)
Sx^2
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
n*Sxy
Sx*Sy
11*1001-9801
numer = n*Sxy-Sx*Sy
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
numer/denom
denom = sqrt(n*Sx2-Sx^2)*sqrt(n*Sy2-Sy^2)
numer/denom
quiz = c(100, 90.63, 84.38, 56.25, 95, 95, 81.67, 58.33, 34.17, 100, 80.61, 92.86, 81.63, 100, 73.33,
96.3, 90.74, 57.96, 100, 89.09, 72.73, 93.33, 95.83, 79.17, 62.5, 65.28, 48.61)
exams = c(75.12, 100, 100)
final = 100
grade = mean(quiz)*.21+mean(exams)*.54+final*.25
grade
# grade calculation
quiz = c(100, 90.63, 84.38, 56.25, 95, 95, 81.67, 58.33, 34.17, 100, 80.61, 92.86, 81.63, 100, 73.33,
96.3, 90.74, 57.96, 100, 89.09, 72.73, 93.33, 95.83, 79.17, 62.5, 65.28, 48.61)
exams = c(75.12)
final = 100
grade = mean(quiz)*.21+mean(exams)*.54+final*.25
grade
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/SamplingPlan")
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
#filter out the recongizable MO###
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
#write.csv(dat2, "SamplingPlan_dat2.csv")
########################################
######### Including plate data #########
########################################
colnames(dat2)[4] = "sampleID"
# 2018_11 plate data #
### the file in plate will come from the qPCR output including ratios ###
plate_11 = read.csv(file = "../2018_11/2018_11_withStress.csv", header = TRUE)
colnames(plate_11)[2] = "sampleID"
full_11 = merge(plate_11, dat2, by = "sampleID")
# 2018_6 plate data #
plate_6 = read.csv(file = , header = TRUE)
colnames(plate_6)[2] = "sampleID"
full_6 = merge(plate_6, dat2, by = "sampleID")
# 2018_8 plate data #
plate_8 = read.csv(file = , header = TRUE)
colnames(plate_8)[2] = "sampleID"
full_8 = merge(plate_8, dat2, by = "sampleID")
# 2018_11 plate data #
### the file in plate will come from the qPCR output including ratios ###
plate_11 = read.csv(file = "../2018_11/2018_11_withStress.csv", header = TRUE)
#### Heirarchical Model Framing ####
HPlate = read.csv(file = "../Heirarchical/Hierarchical_exp_data_stress.csv")
colnames(HPlate)[2] = "sampleID"
max(as.numeric(as.character(HPlate[79:465,2])))
View(HPlate)
View(dat)
dim(dat)
dim(HPlate)
seq(1,10, by = 1)
things = seq(1,10, by = 1)
class(things)
typeof(things)
dim(SamplingPlan)[1]
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/2016_Clayton")
SamplingPlan=read.csv(file="Field Book (2016) - Clayton - Sampling Plan_RAW DATA.csv", header=TRUE)
dim(SamplingPlan)[1]
dim(SamplingPlan)
SamplingPlan$sampNum = c(seq(1,dim(SamplingPlan)[1]))
View(SamplingPlan)
SamplingPlan=read.csv(file="Field Book (2016) - Clayton - Sampling Plan_RAW DATA.csv", header=TRUE)
sampNum = c(seq(1, dim(SamplingPlan)[1]))
SamplingPlan = cbind(sampNum, SamplingPlan)
View(SamplingPlan)
SamplingPlanTidy=SamplingPlan[-c(505:516, 769:780, 949:960, 1129:1140, 1421:1424, 1813, 1838), ]
write.csv(SamplingPlanTidy, file = "Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv")
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/SamplingPlan")
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
#filter out the recongizable MO###
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
colnames(dat2)[4] = "sampleID"
library(stringr)
library(tidyverse)
library(dplyr)
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/SamplingPlan")
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
View(dat)
dim(dat)
max(dat$sampNum)
max(dat$X)
length(unique(dat$sampNum))
length(unique(dat$X))
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/2016_Clayton")
SamplingPlan=read.csv(file="Field Book (2016) - Clayton - Sampling Plan_RAW DATA.csv", header=TRUE)
sampNum = c(seq(1, dim(SamplingPlan)[1]))
SamplingPlan = cbind(sampNum, SamplingPlan)
SamplingPlanTidy=SamplingPlan[-c(505:516, 769:780, 949:960, 1129:1140, 1421:1424, 1813, 1838), ]
View(SamplingPlan)
View(SamplingPlanTidy)
dim(SamplingPlan)
dim(SamplingPlanTidy)
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/SamplingPlan")
### Sample plan data cleaning ###
library(stringr)
library(tidyverse)
library(dplyr)
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
#filter out the recongizable MO###
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
dim(dat)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
dim(as.integer(substrRight(as.character(dat$Genotype))
)
)
View(dat.num)
#############################################
##### formatting the Sampling Plan data #####
#############################################
dat = read.csv(file = "../2016_Clayton/Field Book (2016) - Clayton - Sampling Plan_TIDIED.csv", header = TRUE)
#filter out the recongizable MO###
dat = dat %>% filter(str_detect(dat$Genotype, "Mo") == TRUE)
#create the breedtype category
BreedType = ifelse(substr(dat$Genotype, 1,1)=="M", "Inbred", "Hybrid")
dat = cbind(BreedType, dat)
class(dat$Genotype)
snpFull = read.csv(file = "../IBM94markerset08seq.csv", header = TRUE)
snp = snpFull[,-(1:5)]
#############################################
### matching the Mo### to their snp Values ##
#############################################
library(data.table)
#function takes the last n characters of a string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
dim(dat)
length(dat$Genotype)
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
dim(dat.num)
sum(is.na(dat.num$`as.integer(substrRight(as.character(dat$Genotype), 3))`))
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
colnames(dat2)[4] = "sampleID"
#### Heirarchical Model Framing ####
HPlate = read.csv(file = "../Heirarchical/Hierarchical_exp_data_stress.csv")
colnames(HPlate)[2] = "sampleID"
match(1477, HPlate$sampleID)
match(1489, HPlate$sampleID)
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
snpMatch = rbind(snp.num,snp.new)
snpMatch = transpose(snpMatch)
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
#datnames =names(dat.num)
colnames(dat.num)[16] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
head(snpMatch)
head(snpFull)
#produces warning sign about NA's for data that is not availible for invalid Mo###
snp.num = as.integer(substrRight(as.character(colnames(snp)), 3))
head(snp.num)
snp.new = data.frame(lapply(snp,as.character),stringsAsFactors=FALSE)
head(snp.new)
snpMatch = rbind(snp.num,snp.new)
head(snpMatch)
snpMatch = transpose(snpMatch)
head(snpMatch)
snpMatch[1:10, 1:10]
# creating matching Genotype columns to merge the data
#need = c(1,5,7,8,9,10,16) #column numbers of needed variables
#dat.num = dat.num[,need]
colnames(snpMatch) = "GenotypeNum"
snpMatch[1:10, 1:10]
head(dat.num[16])
#creating datasets exclusively containing the last three numbers
dat.num =cbind(dat, as.integer(substrRight(as.character(dat$Genotype), 3)))
head(dat.num[16])
head(dat.num[17])
#datnames =names(dat.num)
colnames(dat.num)[17] = "GenotypeNum"
dat2 = merge(dat.num,snpMatch, by.x = "GenotypeNum", by.y = "GenotypeNum",all.MoNum = all)
dat2 = dat2[order(dat2$Genotype, decreasing = FALSE),]
dat2 = dat2[,-1] #omit GenotypeNum
dat2[1:20, 1:20]
write.csv(dat2, "SamplingPlan_dat2.csv")
colnames(dat2)[4] = "sampleID"
#### Heirarchical Model Framing ####
HPlate = read.csv(file = "../Heirarchical/Hierarchical_exp_data_stress.csv")
colnames(HPlate)[2] = "sampleID"
max(as.numeric(as.character(HPlate[79:465,2])))
addmarker <- function(full, plate){
aux = matrix(snpFull$incre_new, nrow= 1)
aux = rbind(snpFull$Chromosome, aux)
zeros = dim(full)[2]-dim(aux)[2]
fillnames = names(full)[1:zeros]
other = as.data.frame(matrix(rep(0,2*zeros), nrow = 2)) #repeat the number of 0 as the number of variables
aux = cbind(other,aux)
colnames(aux) = rep("",dim(aux)[2])
colnames(full) = rep("",dim(aux)[2])
dat3 = rbind(aux,full)
colnames(dat3) = c(fillnames, as.character(snpFull$markername))
return(dat3)
}
HPlateData = addmarker(Hplate)
#### Heirarchical Model Framing ####
HPlate = read.csv(file = "../Heirarchical/Hierarchical_exp_data_stress.csv")
colnames(HPlate)[2] = "sampleID"
max(as.numeric(as.character(HPlate[79:465,2])))
HPlateData = addmarker(HPlate)
HPlate[1:5]
dim(HPlate)
View(HPlate)
head(HPlate, 10)
library(MASS)
library(stringr)
## Ordinal Net package ##
library("ordinalNet")
# set directory to the Heirarchical folder
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/Heirarchical")
#### reading in and setting up calibrated data ####
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
calib_data_6 = na.omit(read.csv("../2018_6/calib_2018_6.csv")[,-1])
calib_data_6$ztest1 = (calib_data_6$test1 - mean(calib_data_6$test1))/sd(calib_data_6$test1)
calib_data_6$zallP = (calib_data_6$allP - mean(calib_data_6$allP))/sd(calib_data_6$allP)
calib_data_6$month ='june'
#calib_data_6
# MONTH 2 (2018_8 / AUGUST) CALIBRATED DATA FRAME
calib_data_8 = na.omit(read.csv("../2018_8/calib_2018_8.csv")[,-1])
calib_data_8$ztest1 = (calib_data_8$test1 - mean(calib_data_8$test1))/sd(calib_data_8$test1)
calib_data_8$zallP = (calib_data_8$allP - mean(calib_data_8$allP))/sd(calib_data_8$allP)
calib_data_8$month ='aug'
#calib_data_8
# MONTH 3 (2018_11 / NOVEMBER) CALIBRATED DATA FRAME
calib_data_11 = na.omit(read.csv("../2018_11/calib_2018_11.csv")[,-1])
calib_data_11$ztest1 = (calib_data_11$test1 - mean(calib_data_11$test1))/sd(calib_data_11$test1)
calib_data_11$zallP = (calib_data_11$allP - mean(calib_data_11$allP))/sd(calib_data_11$allP)
calib_data_11$month ='nov'
#calib_data_11
# Combined Calib d.f. for all months
calib_data = rbind(calib_data_6, calib_data_8, calib_data_11)
# Create dummy varible columns for each month
calib_data$june = ifelse(str_detect(calib_data[,6], "june"), 1, 0)
calib_data$aug = ifelse(str_detect(calib_data[,6], "aug"), 1, 0)
head(calib_data[6])
# Drop rows containing NA
calib_subset = calib_data[,c(1, 4:7)]
dim(calib_subset)
view(calib_subset)
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
calib_data_6 = na.omit(read.csv("../2018_6/calib_2018_6.csv")[,-1])
calib_data_6$ztest1 = (calib_data_6$test1 - mean(calib_data_6$test1))/sd(calib_data_6$test1)
calib_data_6$zallP = (calib_data_6$allP - mean(calib_data_6$allP))/sd(calib_data_6$allP)
calib_data_6$month ='june'
#calib_data_6
# MONTH 2 (2018_8 / AUGUST) CALIBRATED DATA FRAME
calib_data_8 = na.omit(read.csv("../2018_8/calib_2018_8.csv")[,-1])
calib_data_8$ztest1 = (calib_data_8$test1 - mean(calib_data_8$test1))/sd(calib_data_8$test1)
calib_data_8$zallP = (calib_data_8$allP - mean(calib_data_8$allP))/sd(calib_data_8$allP)
calib_data_8$month ='aug'
#calib_data_8
# MONTH 3 (2018_11 / NOVEMBER) CALIBRATED DATA FRAME
calib_data_11 = na.omit(read.csv("../2018_11/calib_2018_11.csv")[,-1])
calib_data_11$ztest1 = (calib_data_11$test1 - mean(calib_data_11$test1))/sd(calib_data_11$test1)
calib_data_11$zallP = (calib_data_11$allP - mean(calib_data_11$allP))/sd(calib_data_11$allP)
calib_data_11$month ='nov'
#calib_data_11
# Combined Calib d.f. for all months
calib_data = rbind(calib_data_6, calib_data_8, calib_data_11)
# Create dummy varible columns for each month
calib_data$june = ifelse(str_detect(calib_data[,6], "june"), 1, 0)
calib_data$aug = ifelse(str_detect(calib_data[,6], "aug"), 1, 0)
#calib_data = calib_data[,-6]
view(calib_data)
sum(is.na(calib_data))
# create a subset only containing the startq, zvalues, and dummy months
calib_subset = calib_data[,c(1, 4,5,8,7)]
#define ordinal model starq~zallP+ztest1+month
ordmod = ordinalNet(as.matrix(calib_subset[,2:5]), as.factor(calib_subset$startq))
summary(ordmod)
exp_data_8 = na.omit(read.csv("../2018_8/exp_2018_8.csv")[,-1])
exp_data_8$ztest1 = (exp_data_8$test1 - mean(exp_data_8$test1))/sd(exp_data_8$test1)
exp_data_8$zallP = (exp_data_8$allP - mean(exp_data_8$allP))/sd(exp_data_8$allP)
exp_data_8$month ='aug'
exp_data_8$sampleID.exp = as.factor(exp_data_8$sampleID.exp)
#exp_data_8
# MONTH 2 (2018_6 / JUNE) EXPERIMENTAL DATA FRAME
exp_data_6 = na.omit(read.csv("../2018_6/exp_2018_6.csv")[,-c(1,5,6)])
exp_data_6$ztest1 = (exp_data_6$test1 - mean(exp_data_6$test1))/sd(exp_data_6$test1)
exp_data_6$zallP = (exp_data_6$allP - mean(exp_data_6$allP))/sd(exp_data_6$allP)
exp_data_6$month ='june'
#exp_data_6
# MONTH 3 (2018_11 / NOVEMBER) EXPERIMENTAL DATA FRAME
exp_data_11 = na.omit(read.csv("../2018_11/exp_2018_11.csv")[,-1])
exp_data_11$ztest1 = (exp_data_11$test1 - mean(exp_data_11$test1))/sd(exp_data_11$test1)
exp_data_11$zallP = (exp_data_11$allP - mean(exp_data_11$allP))/sd(exp_data_11$allP)
exp_data_11$month ='nov'
exp_data_11$sampleID.exp = as.factor(exp_data_11$sampleID.exp)
#exp_data_11
# Combined exp d.f. for all months
exp_data = rbind(exp_data_6, exp_data_8, exp_data_11)
# Create dummy varible columns for each month
exp_data$june = ifelse(str_detect(exp_data[,6], "june"), 1, 0)
exp_data$aug = ifelse(str_detect(exp_data[,6], "aug"), 1, 0)
exp_subset
View(exp_data)
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(exp_subset[,2:5]))
