set.seed(12)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit$loglik))
head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
##finding ajustment value##
group = split.data.frame(data, data$stq)
adj <- function(AllP, Test1){
adjust = ave(AllP)-ave(Test1)
return(adjust)
}
adjval = NULL
for (k in group){
adjval = c(adjval,adj(k$allp, k$test1))
}
data$adjval = adjval
data$adjusted_test1 = data$test1 + adjval
#### Simulate the experimental data ####
set.seed = (2)
expAllp.sim = rnorm(200, mean = 24.55, sd = 4.735)
set.seed = (3)
expTest1.sim = rnorm(200, mean = 18.01, sd = 2.77)
expsim = as.data.frame(cbind(expAllp.sim, expTest1.sim))
expsim$ztest1 = (expsim$expTest1.sim - mean(expsim$expTest1.sim))/sd(expsim$expTest1.sim)
expsim$zallP = (expsim$expAllp.sim - mean(expsim$expAllp.sim))/sd(expsim$expAllp.sim)
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]),options(scipen=999))
#### calculating experimental starting quantity ####
probmat = format(predict(ordfit$fit, as.matrix(expsim[,3:4])), scientific = FALSE)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = format(predict(ordfit$fit, as.matrix(expsim[,3:4])), options(scipen=999))
#### calculating experimental starting quantity ####
probmat = format(predict(ordfit$fit, as.matrix(expsim[,3:4])), scientific = FALSE)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
options(scipen=999, digits = 4)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
options(scipen=100, digits = 4)
probmat[1:10,]
#### calculating experimental starting quantity ####
probmat = predict(ordfit$fit, as.matrix(expsim[,3:4]))
options(scipen=999)
probmat[1:10,]
install.packages(precrec)
install.packages("precrec")
library('precrec')
math = c(64,50,85,34,56,24,72,63,42,93)
sci = c(68,70,83,33,60,27,74,63,40,96)
plot(math, sci)
abline(lm(sci~math))
plot(math, sci, main = "Association between Math and Science Test Scores")
abline(lm(sci~math))
abs = c(3,5,1,1,3,6,5,3,0,7,8,2,9,0,6,6,2,0,5,7,9,1)
scores = c(65,50,95,85,50,34,70,56,100,24,45,71,30,95,55,42,90,92,60,50,10,80)
plot(abs, math, main = "Plot of number of Absences vs. Math Scores")
abline(lm(scores~abs))
length(abs)
length(scores)
abs = c(3,5,1,1,3,6,5,3,0,7,8,2,9,0,6,6,2,0,5,7,9,1)
scores = c(65,50,95,85,50,34,70,56,100,24,45,71,30,95,55,42,90,92,60,50,10,80)
plot(abs, math, main = "Plot of number of Absences vs. Math Scores")
plot(abs, scores, main = "Plot of number of Absences vs. Math Scores")
abline(lm(scores~abs))
summary(lm(scores~abs))
predict(lm(scores~abs), 3)
model = lm(scores~abs)
abline(model)
summary(model)
predict(model, 3)
predict(3, model)
predict(model, 3)
predict(model, as.matrix(3)
)
predict(model, c(2,3))
dat = cbind(abs, scores)
model = lm(scores~abs, data = dat)
dat = as.matrix(cbind(abs, scores))
model = lm(scores~abs, data = dat)
dat = as.data.frame(cbind(abs, scores))
plot(abs, scores, main = "Plot of number of Absences vs. Math Scores")
model = lm(scores~abs, data = dat)
abline(model)
summary(model)
predict(model, 3)
predict(model, c(2,3))
math = c(64,50,85,34,56,24,72,63,42,93)
sci = c(68,70,83,33,60,27,74,63,40,96)
plot(math, sci, main = "Association between Math and Science Test Scores")
abline(lm(sci~math))
abs = c(3,5,1,1,3,6,5,3,0,7,8,2,9,0,6,6,2,0,5,7,9,1)
scores = c(65,50,95,85,50,34,70,56,100,24,45,71,30,95,55,42,90,92,60,50,10,80)
dat = as.data.frame(cbind(abs, scores))
plot(abs, scores, main = "Plot of number of Absences vs. Math Scores")
model = lm(scores~abs, data = dat)
abline(model)
summary(model)
library('dplyr')
library('ordinalNet')
library('precrec')
data(P10N10)
View(P10N10)
head(P10N10)
sscurves <- evalmod(scores = P10N10$scores, labels = P10N10$labels)
plot(sscurves)
plot(sscurves, "PRC")
samp1 <- create_sim_samples(5, 50000, 50000)
View(samp1)
eval1 <- evalmod(scores = samp1$scores, labels = samp1$labels)
View(eval1)
eval1
67*17.5
36*15
36*15+1172.5
1712.5*.75
(67+16)*17.5
((67+16)*17.5+540)*.75
#create the dataset with starting quantites, all products and test 1 cp values
sd.val = 0.2
sd.val.test = 0.1
set.seed(1234)
eps = rnorm(21, 0, sd.val)
set.seed(12345)
eps.test= rnorm(21, 0, sd.val.test)
stq =sort(rep(c(0.010, 0.050, 0.100, 0.500, 1.000, 0.005, 5.000), 3))
allp = (-2.5)*log(stq)+25+eps
test1 = -2.7*log(stq)+23+eps.test
data = as.data.frame(cbind(stq, allp, test1))
data$ztest1 = (data$test1 - mean(data$test1))/sd(data$test1)
data$zallP = (data$allp - mean(data$allp))/sd(data$allp)
View(data)
covmat = as.matrix(data[, c(4,5)])
ordmod = ordinalNet(covmat, as.factor(data$stq))
summary(ordmod)
coef(ordmod, matrix=TRUE)
#kfold cv
set.seed(12)
ordfit = ordinalNetTune(covmat, as.factor(data$stq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit$loglik))
head(coef(ordfit$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
#######################################
####### k-Fold Cross Validation ####### ordinalNet model
#######################################
library(caret)
n = length(calib_subset[,1])
set.seed(1)
f <- 7
folds <- rep_len(1:f, length.out = dim(calib_subset)[1])
folds <- sample(folds, size = dim(calib_subset)[1], replace = F)
table(folds)
n = length(data[,1])
set.seed(1)
f <- 7
folds <- rep_len(1:f, length.out = dim(data)[1])
folds <- sample(folds, size = dim(data)[1], replace = F)
table(folds)
preds = NULL
truth = NULL
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "startq"]
train_x = data[-test.ID, 2:5]
test_y = data[test.ID, "startq"]
test_x = data[test.ID, 2:5]
truth = c(truth, test_y)
model.fit = ordinalNet(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "startq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "startq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordinalNet(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
preds = NULL
truth = NULL
for (k in 1:f){
test.ID = which(folds == k)
train_y = data[-test.ID, "stq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "stq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordfit$fit(as.matrix(train_x), as.factor(train_y))
preds = c(preds, predict(model.fit, test_x)) #need to fix s.t. results in 9 values rather than 45
}
set.seed = (2)
expAllp.sim = rnorm(200, mean = 24.55, sd = 4.735)
set.seed = (3)
expTest1.sim = rnorm(200, mean = 18.01, sd = 2.77)
expsim = as.data.frame(cbind(expAllp.sim, expTest1.sim))
expsim$ztest1 = (expsim$expTest1.sim - mean(expsim$expTest1.sim))/sd(expsim$expTest1.sim)
expsim$zallP = (expsim$expAllp.sim - mean(expsim$expAllp.sim))/sd(expsim$expAllp.sim)
#####
#### calculating experimental starting quantity ####
k = 1
test.ID = which(folds == k)
train_y = data[-test.ID, "stq"]
train_x = data[-test.ID, 4:5]
test_y = data[test.ID, "stq"]
test_x = data[test.ID, 4:5]
truth = c(truth, test_y)
model.fit = ordfit$fit(as.matrix(train_x), as.factor(train_y))
model.fit = ordfit$fit(train_x, train_y)
train_x
train_y
model.fit = ordinalNetTune(train_x, train_y)
model.fit = ordinalNetTune(train_x, as.factor(train_y), family = 'cumulative', link = 'logit',
parallelTerms = TRUE, nonparallelTerms = TRUE, want = FALSE,
printProgress = FALSE)
100/9
library('dplyr')
library('ordinalNet')
library('precrec')
-16.05*1000
5*.2
5*.2-10*.2
0.00533/34.34
fg =c(0.00533, 0.00208, 0.00317, 0.00597, 0.00967, 0.00766)
pg = c(34.34, 35.59, 35.03, 37.25, 33.55, 33.86)
pg/fg
fg/pg
options(scipen=999)
fg/pg
x =c(10,8,13,9,11,14,6,4,12,7,5)
y =c(9.14,8.14,8.75,8.77,9.25,8.09,6.13,3.09,9.13,7.26,4.74)
Sx =sum(x)
Sy = sum(y)
Sxy = sum(x*y)
Sx2 = sum(x^2)
Sy2 = sum(y^2)
n = length(x)
numer = n*Sxy-Sx*Sy
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sx2-Sx^2)
numer/denom
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
numer/denom
sqrt(n*Sx2-Sx^2)
denom = sqrt(n*(Sx2-Sx^2))-sqrt(n*(Sy2-Sy^2)
)
denom = sqrt(n*(Sx2-Sx^2))-sqrt(n*(Sy2-Sy^2))
sqrt(n*(Sx2-Sx^2))
sqrt(11*1001-9801)
Sx^2
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
n*Sxy
Sx*Sy
11*1001-9801
numer = n*Sxy-Sx*Sy
denom = sqrt(n*Sx2-Sx^2)-sqrt(n*Sy2-Sy^2)
numer/denom
denom = sqrt(n*Sx2-Sx^2)*sqrt(n*Sy2-Sy^2)
numer/denom
library(MASS)
library(stringr)
## Ordinal Net package ##
library("ordinalNet")
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/ByMonthAnalysis")
#### reading in and setting up calibrated data ####
# MONTH 1 (2018_6 / JUNE) CALIBRATED DATA FRAME
calib_data_6 = na.omit(read.csv("../2018_6/calib_2018_6.csv")[,-1])
calib_data_6$ztest1 = (calib_data_6$test1 - mean(calib_data_6$test1))/sd(calib_data_6$test1)
calib_data_6$zallP = (calib_data_6$allP - mean(calib_data_6$allP))/sd(calib_data_6$allP)
calib_data_6$month ='june'
#calib_data_6
# MONTH 2 (2018_8 / AUGUST) CALIBRATED DATA FRAME
calib_data_8 = na.omit(read.csv("../2018_8/calib_2018_8.csv")[,-1])
calib_data_8$ztest1 = (calib_data_8$test1 - mean(calib_data_8$test1))/sd(calib_data_8$test1)
calib_data_8$zallP = (calib_data_8$allP - mean(calib_data_8$allP))/sd(calib_data_8$allP)
calib_data_8$month ='aug'
#calib_data_8
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/Heirarchical")
#set working directory to ByMonthAnalysis folder
setwd("C:/Users/twili/Desktop/GIThub/Andrew/stapleton_lab/Stress_Splicing/ByMonthAnalysis")
#CALIBRATED DATA FRAME
calib_data_6 = na.omit(read.csv("../2018_6/calib_2018_6.csv")[,-1])
calib_data_6$ztest1 = (calib_data_6$test1 - mean(calib_data_6$test1))/sd(calib_data_6$test1)
calib_data_6$zallP = (calib_data_6$allP - mean(calib_data_6$allP))/sd(calib_data_6$allP)
calib_data_6$month ='june'
#calib_data_6
plot(calib_data_6$allP,log(calib_data_6$startq), col = 'red', main = "June Log Starting Quanitty vs. Cp Values",
ylab = "log(Starting Quantity)", xlab = "Cp Values" , xlim = c(5, 25), ylim = c(-6, 1))
points(calib_data_6$test1,log(calib_data_6$startq), col = 'blue')
abline(lm(log(calib_data_6$startq)~calib_data_6$allP), col = 'red')
abline(lm(log(calib_data_6$startq)~calib_data_6$test1), col = 'blue')
legend('topright', legend=c("Test 1", "All Products"),
col=c("blue", "red"), lty = 1, cex=0.8)
#define ordinal model starq~zallP+ztest1
ordmod6 = ordinalNet(as.matrix(calib_data_6[,4:5]), as.factor(calib_data_6$startq))
summary(ordmod6)
coef(ordmod6, matrix=TRUE)
#kfold cv
set.seed(3)
ordfit6 = ordinalNetTune(as.matrix(calib_data_6[,4:5]), as.factor(calib_data_6$startq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit6$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit6$loglik))
head(coef(ordfit6$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
exp_data_6 = na.omit(read.csv("../2018_6/exp_2018_6.csv")[,-c(1,5,6)])
exp_data_6$ztest1 = (exp_data_6$test1 - mean(exp_data_6$test1))/sd(exp_data_6$test1)
exp_data_6$zallP = (exp_data_6$allP - mean(exp_data_6$allP))/sd(exp_data_6$allP)
exp_data_6$month ='june'
#exp_data_6
#create a prob matrix using the model and month
probmat6 = predict(ordfit6$fit, as.matrix(exp_data_6[,4:5]))
probmat6[1:10,]
##### finding adjustment value and adjusted test 1 in calibrated #####
group = split.data.frame(calib_data_6, calib_data_6$startq)
adj <- function(AllP, Test1){
adjust = ave(AllP)-ave(Test1)
return(adjust)
}
adjval = NULL
for (k in group){
adjval = c(adjval,adj(k$allP, k$test1))
}
adj6 = as.data.frame(cbind(as.factor(unique(calib_data_6$startq)), unique(adjval)))
colnames(adj6) = c("startq", "adj")
View(adj6)
#convert adjustment from picograms to femtograms (1:1000)
adj6$adj = (adj6$adj)*1000
# convert test1 and allp to femtograms
exp_data_6[,c(2,3)] = exp_data_6[,c(2,3)]*1000
# Apply probability matrix to the adjustment values using matrix multiplication
exp_data_6$exp.adjust = probmat6%*%adj6$adj
View(exp_data_6)
boxplot(exp_data_6$exp.adjust, adj6$adj)
boxplot(exp_data_6$exp.adjust)
boxplot(adj6$adj)
summary(exp_data_6$exp.adjust)
summary(adj6$adj)
exp_data_6$stress = exp_data_6$allP.exp - exp_data_6$exp.adjustTest1
summary(exp_data_6$stress)
boxplot(exp_data_6$stress)
head(sort(exp_data_6$stress), 20)
### analyzing negative stress ###
negstress6 = na.omit(ifelse(exp_data_6$stress<0,exp_data_6$stress,NA))
hist(negstress6, col = "light green")
length(negstress6)/length(exp_data_6$stress) # 29.89% of stress is negative
adj6 = as.data.frame(cbind(as.factor(unique(calib_data_6$startq)), unique(adjval)))
colnames(adj6) = c("startq", "adj")
#convert adjustment from picograms to femtograms (1:1000)
adj6$adj = (adj6$adj)*1000
# convert test1 and allp to femtograms
exp_data_6[,c(2,3)] = exp_data_6[,c(2,3)]*1000
# Apply probability matrix to the adjustment values using matrix multiplication
# this creates a weighted average for the adjustment for each observation
exp_data_6$exp.adjust = probmat6%*%adj6$adj
# calculate the adjusted test 1
exp_data_6$exp.adjustTest1 = exp_data_6$test1.exp+exp_data_6$exp.adjust
#
######################## End of June ########################exp_data_6$stress = exp_data_6$allP.exp - exp_data_6$exp.adjustTest1
summary(exp_data_6$stress)
boxplot(exp_data_6$stress)
head(sort(exp_data_6$stress), 20)
### analyzing negative stress ###
negstress6 = na.omit(ifelse(exp_data_6$stress<0,exp_data_6$stress,NA))
hist(negstress6, col = "light green")
length(negstress6)/length(exp_data_6$stress) # 29.89% of stress is negative
######################## End of June ########################
exp_data_6$stress = exp_data_6$allP.exp - exp_data_6$exp.adjustTest1
summary(exp_data_6$stress)
boxplot(exp_data_6$stress)
head(sort(exp_data_6$stress), 20)
### analyzing negative stress ###
negstress6 = na.omit(ifelse(exp_data_6$stress<0,exp_data_6$stress,NA))
hist(negstress6, col = "light green")
length(negstress6)/length(exp_data_6$stress) # 29.89% of stress is negative
allStress = c(exp_data_6$stress, exp_data_11$stress, exp_data_8$stress)
######################## End of June ########################
#####################################
##### MONTH 2 (2018_8 / AUGUST) #####
#####################################
#CALIBRATED DATA FRAME
calib_data_8 = na.omit(read.csv("../2018_8/calib_2018_8.csv")[,-1])
calib_data_8$ztest1 = (calib_data_8$test1 - mean(calib_data_8$test1))/sd(calib_data_8$test1)
calib_data_8$zallP = (calib_data_8$allP - mean(calib_data_8$allP))/sd(calib_data_8$allP)
calib_data_8$month ='aug'
#calib_data_8
#define ordinal model starq~zallP+ztest1
ordmod8 = ordinalNet(as.matrix(calib_data_8[,4:5]), as.factor(calib_data_8$startq))
summary(ordmod8)
coef(ordmod8, matrix=TRUE)
#kfold cv
set.seed(3)
ordfit8 = ordinalNetTune(as.matrix(calib_data_8[,4:5]), as.factor(calib_data_8$startq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit8$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit8$loglik))
head(coef(ordfit8$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
# MONTH 2 (2018_8 / AUGUST) EXPERIMENTAL DATA FRAME
exp_data_8 = na.omit(read.csv("../2018_8/exp_2018_8.csv")[,-1])
exp_data_8$ztest1 = (exp_data_8$test1 - mean(exp_data_8$test1))/sd(exp_data_8$test1)
exp_data_8$zallP = (exp_data_8$allP - mean(exp_data_8$allP))/sd(exp_data_8$allP)
exp_data_8$month ='aug'
exp_data_8$sampleID.exp = as.factor(exp_data_8$sampleID.exp)
#exp_data_8
#create a prob matrix using the model and month
probmat8 = predict(ordfit8$fit, as.matrix(exp_data_8[,4:5]))
probmat8[1:10,]
##### finding adjustment value and adjusted test 1 in calibrated #####
group = split.data.frame(calib_data_8, calib_data_8$startq)
adj <- function(AllP, Test1){
adjust = ave(AllP)-ave(Test1)
return(adjust)
}
adjval = NULL
for (k in group){
adjval = c(adjval,adj(k$allP, k$test1))
}
adj8 = as.data.frame(cbind(as.factor(unique(calib_data_8$startq)), unique(adjval)))
colnames(adj8) = c("startq", "adj")
#convert adjustment from picograms to femtograms (1:1000)
adj8$adj = (adj8$adj)*1000
# convert test1 and allp to femtograms
exp_data_8[,c(2,3)] = exp_data_8[,c(2,3)]*1000
# Apply probability matrix to the adjustment values using matrix multiplication
exp_data_8$exp.adjust = probmat8%*%adj8$adj
# Create new column with stress product (VQTL input)
exp_data_8$exp.adjustTest1 = exp_data_8$test1.exp+exp_data_8$exp.adjust
# convert allP and adjusted test 1 to femtograms
exp_data_8$stress = exp_data_8$allP.exp - exp_data_8$exp.adjustTest1
summary(exp_data_8$stress)
boxplot(exp_data_8$stress)
head(sort(exp_data_8$stress), 20)
### analyzing negative stress ###
negstress8 = na.omit(ifelse(exp_data_8$stress<0,exp_data_8$stress,NA))
hist(negstress8, col = "light green")
length(negstress8)/length(exp_data_8$stress) # 13.17% of stress is negative
####################### End of August #######################
#####################################
#### MONTH 3 (2018_11 / NOVEMBER) ###
#####################################
#CALIBRATED DATA FRAME
calib_data_11 = na.omit(read.csv("../2018_11/calib_2018_11.csv")[,-1])
calib_data_11$ztest1 = (calib_data_11$test1 - mean(calib_data_11$test1))/sd(calib_data_11$test1)
calib_data_11$zallP = (calib_data_11$allP - mean(calib_data_11$allP))/sd(calib_data_11$allP)
calib_data_11$month ='nov'
#calib_data_11
#define ordinal model starq~zallP+ztest1
ordmod11 = ordinalNet(as.matrix(calib_data_11[,4:5]), as.factor(calib_data_11$startq))
summary(ordmod11)
coef(ordmod11, matrix=TRUE)
#kfold cv
set.seed(3)
ordfit11 = ordinalNetTune(as.matrix(calib_data_11[,4:5]), as.factor(calib_data_11$startq), family = "cumulative",
link = "logit", parallelTerms = TRUE, nonparallelTerms = TRUE,
warn = FALSE, printProgress = FALSE)
head(ordfit11$loglik)
bestLambdaIndex = which.max(rowMeans(ordfit11$loglik))
head(coef(ordfit11$fit, matrix = TRUE, whichLambda = bestLambdaIndex))
# MONTH 3 (2018_11 / NOVEMBER) EXPERIMENTAL DATA FRAME
exp_data_11 = na.omit(read.csv("../2018_11/exp_2018_11.csv")[,-1])
exp_data_11$ztest1 = (exp_data_11$test1 - mean(exp_data_11$test1))/sd(exp_data_11$test1)
exp_data_11$zallP = (exp_data_11$allP - mean(exp_data_11$allP))/sd(exp_data_11$allP)
exp_data_11$month ='nov'
exp_data_11$sampleID.exp = as.factor(exp_data_11$sampleID.exp)
#exp_data_11
#create a prob matrix using the model and month
probmat11 = predict(ordfit11$fit, as.matrix(exp_data_11[,4:5]))
probmat11[1:10,]
##### finding adjustment value and adjusted test 1 in calibrated #####
group = split.data.frame(calib_data_11, calib_data_11$startq)
adj <- function(AllP, Test1){
adjust = ave(AllP)-ave(Test1)
return(adjust)
}
adjval = NULL
for (k in group){
adjval = c(adjval,adj(k$allP, k$test1))
}
adj11 = as.data.frame(cbind(as.factor(unique(calib_data_11$startq)), unique(adjval)))
colnames(adj11) = c("startq", "adj")
#convert adjustment from picograms to femtograms (1:1000)
adj11$adj = (adj11$adj)*1000
# convert test1 and allp to femtograms
exp_data_11[,c(2,3)] = exp_data_11[,c(2,3)]*1000
# Apply probability matrix to the adjustment values using matrix multiplication
exp_data_11$exp.adjust = probmat11%*%adj11$adj
# Create new column with stress product (VQTL input)
exp_data_11$exp.adjustTest1 = exp_data_11$test1.exp+exp_data_11$exp.adjust
# convert allP and adjusted test 1 to femtograms
exp_data_11$stress = exp_data_11$allP.exp - exp_data_11$exp.adjustTest1
summary(exp_data_11$stress)
boxplot(exp_data_11$stress)
head(sort(exp_data_11$stress), 20)
### analyzing negative stress ###
negstress11 = na.omit(ifelse(exp_data_11$stress<0,exp_data_11$stress,NA))
hist(negstress11, col = "light green")
length(negstress11)/length(exp_data_11$stress) # 7.14% of stress is negative
allStress = c(exp_data_6$stress, exp_data_11$stress, exp_data_8$stress)
NegStress = c(negstress11, negstress6, negstress8)
boxplot(NegStress)
boxplot(allStress)
length(NegStress)/length(allStress)
